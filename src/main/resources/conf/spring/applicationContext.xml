<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

	<context:annotation-config />
	<context:component-scan base-package="cn.zyc.shiro.dao" />
	<context:component-scan base-package="cn.zyc.shiro.service" />
	<context:component-scan base-package="cn.zyc.shiro.security" />
	<!-- 读取Properties文件配置信息 -->
	<context:property-placeholder location="classpath:jdbc.properties"
		ignore-unresolvable="true" />

	<!-- Spring AOP auto-proxy creation (required to support Shiro annotations) -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<!-- ========================================================= Shiro Components 
		========================================================= -->

	<!-- Shiro's main business-tier object for web-enabled applications (use 
		org.apache.shiro.web.mgt.DefaultWebSecurityManager instead when there is 
		no web environment) -->

	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app (realm configured next, below). If you have multiple 
			realms, use the 'realms' property instead. -->
		<property name="realm" ref="shiroRealm" />
		<!-- Uncomment this next property if you want heterogenous session access 
			or clusterable/distributable sessions. The default value is 'http' which 
			uses the Servlet container's HttpSession as the underlying Session implementation. 
			<property name="sessionMode" value="native"/> -->
	</bean>

	<!-- Post processor that automatically invokes init() and destroy() methods -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Define the Shiro Filter here (as a FactoryBean) instead of directly 
		in web.xml - web.xml uses the DelegatingFilterProxy to access this bean. 
		This allows us to wire things with more control as well utilize nice Spring 
		things such as PropertiesPlaceholderConfigurer and abstract beans or anything 
		else we might need: -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.do" />
		<property name="successUrl" value="/home.do" />
		<property name="unauthorizedUrl" value="/unauthorized.do" />
		<!-- The 'filters' property is usually not necessary unless performing 
			an override, which we want to do here (make authc point to a PassthruAuthenticationFilter 
			instead of the default FormAuthenticationFilter: -->
		<property name="filters">
			<util:map>
				<entry key="authc">
					<bean
						class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter" />
				</entry>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/signup.do = anon
				/manageUser.do = perms[user:manage]
				/*.do = authc
			</value>
		</property>
	</bean>
	<import resource="applicationContext_db.xml" />
	<import resource="applicationContext_dao.xml" />
</beans>
